; OM File Header - Saved 2008/11/07 13:50:39
; (6.04 :patc (om-make-point 121 76) (om-make-point 50 50) (om-make-point 834 519) "No documentation " 183 0 nil "2008/11/06 19:32:07")
; End File Header
(in-package :om)(load-lib-for (quote ("ompitchfield")))(setf *om-current-persistent* (om-load-patch1 "partitions" (quote ((om-load-boxcomment "comment" (om-make-point 121 53) (quote "size of the first portion of the partition") "" (om-make-point 62 12) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 102 37) (quote "set to be partitioned") "" (om-make-point 277 30) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "CHORD-SEQS" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))))) (om-make-point 504 343) (om-make-point 148 122) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6100 6200) (6000 6400 6500) (6000 6100 6300) (6000 6100 6400) (6000 6100 6400) (6000 6100 6600) (6000 6100 6400) (6000 6100 6300) (6000 6300 6400) (6000 6200 6600) (6000 6100 6500) (6000 6200 6400) (6000 6400 6500) (6000 6100 6200) (6000 6400 6500) (6000 6200 6700) (6000 6400 6500) (6000 6400 6800) (6000 6100 6600) (6000 6100 6400) (6000 6500 6600) (6000 6300 6700) (6000 6200 6400) (6000 6100 6500) (6000 6300 6500) (6000 6300 6700) (6000 6200 6600) (6000 6300 6400) (6000 6400 6600) (6000 6400 6700) (6000 6200 6700) (6000 6400 6500) (6000 6300 6700) (6000 6300 6500) (6000 6300 6700) (6000 6500 6600) (6000 6400 6700) (6000 6400 6600) (6000 6400 6800) (6000 6400 6500))) :lonset (quote (0 500 1500 2000 3000 3500 4500 5000 6000 6500 7500 8000 9000 9500 10500 11000 12000 12500 13500 14000 15000 15500 16500 17000 18000 18500 19500 20000 21000 21500 22500 23000 24000 24500 25500 26000 27000 27500 28500 29000 30000)) :ldur (quotelvel (quoteloffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100 6200 6300) (6500 6900 7000) (6200 6300 6500) (6100 6900 7000) (6100 6200 6500) (6300 6900 7000) (6100 6900 7000) (6200 6300 6500) (6100 6200 7000) (6300 6500 6900) (6200 6900 7000) (6100 6300 6500) (6500 6900 7000) (6100 6200 6300) (6100 6200 6900) (6300 6500 7000) (6200 6300 7000) (6100 6500 6900) (6300 6900 7000) (6100 6200 6500) (6200 6300 6900) (6100 6500 7000) (6100 6300 6500) (6200 6900 7000) (6100 6300 7000) (6200 6500 6900) (6300 6500 6900) (6100 6200 7000) (6100 6300 6900) (6200 6500 7000) (6300 6500 7000) (6100 6200 6900) (6200 6500 6900) (6100 6300 7000) (6100 6500 7000) (6200 6300 6900) (6200 6500 7000) (6100 6300 6900) (6100 6500 6900) (6200 6300 7000))) :lonset (quote (0 500 1500 2000 3000 3500 4500 5000 6000 6500 7500 8000 9000 9500 10500 11000 12000 12500 13500 14000 15000 15500 16500 17000 18000 18500 19500 20000 21000 21500 22500 23000 24000 24500 25500 26000 27000 27500 28500 29000 30000)) :ldur (quotelvel (quoteloffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)) ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 -18) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g)) 24 2 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 592 288) nil nil nil nil 1) (om-load-boxcall (quote genfun) "T-PRIMEFORM" (quote t-primeform) (quote ((om-load-inputfun (quote input-funbox) "any member of the set class whose t-primeform is sought" "PCSET" (list 1 3 4)))) (om-make-point 430 95) nil nil nil nil 1) (om-load-boxcall (quote genfun) "P->MC11" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 419 163) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ11" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 479 225) (om-make-point 80 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6100 6200) (6000 6400 6500) (6000 6100 6300) (6000 6100 6400) (6000 6100 6400) (6000 6100 6600) (6000 6100 6400) (6000 6100 6300) (6000 6300 6400) (6000 6200 6600) (6000 6100 6500) (6000 6200 6400) (6000 6400 6500) (6000 6100 6200) (6000 6400 6500) (6000 6200 6700) (6000 6400 6500) (6000 6400 6800) (6000 6100 6600) (6000 6100 6400) (6000 6500 6600) (6000 6300 6700) (6000 6200 6400) (6000 6100 6500) (6000 6300 6500) (6000 6300 6700) (6000 6200 6600) (6000 6300 6400) (6000 6400 6600) (6000 6400 6700) (6000 6200 6700) (6000 6400 6500) (6000 6300 6700) (6000 6300 6500) (6000 6300 6700) (6000 6500 6600) (6000 6400 6700) (6000 6400 6600) (6000 6400 6800) (6000 6400 6500))) :lonset (quote (0 500 1500 2000 3000 3500 4500 5000 6000 6500 7500 8000 9000 9500 10500 11000 12000 12500 13500 14000 15000 15500 16500 17000 18000 18500 19500 20000 21000 21500 22500 23000 24000 24500 25500 26000 27000 27500 28500 29000 30000)) :ldur (quotelvel (quoteloffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 41/50 nil 1000 0 18350450 2621450 0 0 (quote t))) nil nil nil nil) (om-load-boxcall (quote lispfun) "MAPCAR1" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote list)) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 245 306) (om-make-point 58 37) nil nil "mapcar" 1) (om-load-boxcall (quote genfun) "P->MC1" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 579 163) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 651 225) (om-make-point 80 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100 6200 6300) (6500 6900 7000) (6200 6300 6500) (6100 6900 7000) (6100 6200 6500) (6300 6900 7000) (6100 6900 7000) (6200 6300 6500) (6100 6200 7000) (6300 6500 6900) (6200 6900 7000) (6100 6300 6500) (6500 6900 7000) (6100 6200 6300) (6100 6200 6900) (6300 6500 7000) (6200 6300 7000) (6100 6500 6900) (6300 6900 7000) (6100 6200 6500) (6200 6300 6900) (6100 6500 7000) (6100 6300 6500) (6200 6900 7000) (6100 6300 7000) (6200 6500 6900) (6300 6500 6900) (6100 6200 7000) (6100 6300 6900) (6200 6500 7000) (6300 6500 7000) (6100 6200 6900) (6200 6500 6900) (6100 6300 7000) (6100 6500 7000) (6200 6300 6900) (6200 6500 7000) (6100 6300 6900) (6100 6500 6900) (6200 6300 7000))) :lonset (quote (0 500 1500 2000 3000 3500 4500 5000 6000 6500 7500 8000 9000 9500 10500 11000 12000 12500 13500 14000 15000 15500 16500 17000 18000 18500 19500 20000 21000 21500 22500 23000 24000 24500 25500 26000 27000 27500 28500 29000 30000)) :ldur (quotelvel (quoteloffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 41/50 nil 1000 0 18350450 2621450 0 0 (quote t))) nil nil nil nil) (let ((newbox (om-load-boxcall (quote genfun) "NESTING->TIMING11" (quote nesting->timing) (quote ((om-load-inputfun (quote input-funbox) "nested list of numbers" "LST" nil) (om-load-inputfun (quote input-funbox) "number of nested levels to flatten [or if negative, abs val is number of nested levels to remain after flattening]" "LEVELS" -1) (om-load-inputfun (quote input-funbox) "time unit separating members of same sublist (multiplied at sublist boundaries)" "TIME-UNIT" 500))) (om-make-point 502 24) nil nil nil nil 2))) (setf (frame-position newbox) (om-make-point 502 24)) newbox) (om-load-boxcall (quote genfun) "SET-COMPLEMENT1" (quote set-complement) (quote ((om-load-inputfun (quote input-funbox) "a list of mod-12 integers (or a list of such lists)" "PCSET" (list 0 1 2)) (om-load-inputfun (quote input-funbox) "a list of mod-12 integers (or a list of such lists)" "SPACE" (list 0 1 2)))) (om-make-point 302 234) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list3" (quote list) (quote nil) (om-make-point 14 59) (om-make-point 20 28) 3 "3" nil) (om-load-boxcall (quote genfun) "FIND-PCSET-IN-FIELD" (quote find-pcset-in-field) (quote ((om-load-inputfun (quote input-funbox) "list of mod-12 integers (or list of such lists)" "PCSET" (list 0 2)) (om-load-inputfun (quote input-funbox) "list of integers" "FIELD" (list 0 2 5 7 10 12 15)))) (om-make-point 181 95) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 288 64) (om-make-point 86 28) (list 2 1 9 10 5 3) "(2 1 9 10 5 3)" nil) (let ((newbox (om-load-boxcall (quote genfun) "NESTING->TIMING2" (quote nesting->timing) (quote ((om-load-inputfun (quote input-funbox) "nested list of numbers" "LST" nil) (om-load-inputfun (quote input-funbox) "number of nested levels to flatten [or if negative, abs val is number of nested levels to remain after flattening]" "LEVELS" -1) (om-load-inputfun (quote input-funbox) "time unit separating members of same sublist (multiplied at sublist boundaries)" "TIME-UNIT" 500))) (om-make-point 190 168) nil nil nil nil 2))) (setf (frame-position newbox) (om-make-point 190 168)) newbox) (om-load-boxcall (quote genfun) "LIST-TI-PRIMEFORMS1" (quote list-ti-primeforms) (quote ((om-load-inputfun (quote input-funbox) "number of elements in each primeform (or a list of such numbers)" "CARD" 3) (om-load-inputfunmenu1 (quote input-funmenu) "" "TAG" nil (list (list "normal" nil) (list "tagged [:ti]" (quote :ti)))))) (om-make-point 20 93) nil nil nil nil 1) (let ((newbox (om-load-boxcall (quote genfun) "MAKE-TI-SETCLASS1" (quote make-ti-setclass) (quote ((om-load-inputfun (quote input-funbox) "any member of the desired ti-setclass (or list containing one member of each desired ti-setclass)" "PCSET" (list 0 1 2)))) (om-make-point 35 166) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 35 166)) newbox))) (quote ((3 0 2 1 nil 0) (6 0 3 0 nil 0) (9 0 3 1 nil 0) (10 0 4 0 nil 5) (4 0 5 0 nil 0) (5 0 6 1 nil 0) (10 1 6 2 nil 1) (15 0 7 1 nil 0) (11 0 7 2 nil 0) (10 0 8 0 nil 5) (8 0 9 1 nil 0) (10 1 9 2 nil 1) (7 0 10 0 nil 0) (15 0 11 0 nil 0) (14 0 11 1 nil 0) (17 0 13 0 nil 0) (14 0 13 1 nil 0) (13 0 15 0 nil 0) (12 0 16 0 nil 0) (16 0 17 0 nil 0))) nil 6.04))
