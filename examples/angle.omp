; OM File Header - Saved 2008/11/07 13:50:38
; (6.04 :patc (om-make-point 85 22) (om-make-point 50 50) (om-make-point 735 615) "No documentation " 183 0 nil "2008/11/06 19:35:08")
; End File Header
(in-package :om)(load-lib-for (quote ("ompitchfield")))(setf *om-current-persistent* (om-load-patch1 "angle" (quote ((om-load-boxcomment "comment" (om-make-point 137 103) (quote "evaluate the \"values\" function to display two chords in the Patch window and return ic- and trichord-based similarity measures to the Listener") "" (om-make-point 4 431) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "VALUES" (quote values) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 253 494) nil nil nil nil 1) (om-load-boxcall (quote genfun) "P->MC1" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 340 275) nil nil nil nil 1) (om-load-boxcall (quote genfun) "P->MC" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 400 270) nil nil nil nil 1) (om-load-editor-box1 "CHORD1" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 332 346) (om-make-point 76 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200 6300 6500 6600 6800)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) thechord) nil nil (pairlis (quote (show-stems obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos microplay scale)) (list (quote t) 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -12) 0 0 1 nil 1000 0 18350450 2621450 nil nil)) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 420 375) (om-make-point 76 87) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200 6400 6600 6800)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) thechord) nil nil (pairlis (quote (show-stems obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos microplay scale)) (list (quote t) 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -11) 0 0 1 nil 1000 0 18350450 2621450 nil nil)) t nil nil nil) (let ((newbox (om-load-boxcall (quote genfun) "NESTING->TIMING" (quote nesting->timing) (quote ((om-load-inputfun (quote input-funbox) "nested list of numbers" "LST" nil) (om-load-inputfun (quote input-funbox) "number of nested levels to flatten [or if negative, abs val is number of nested levels to remain after flattening]" "LEVELS" -1) (om-load-inputfun (quote input-funbox) "time unit separating members of same sublist (multiplied at sublist boundaries)" "TIME-UNIT" 500))) (om-make-point 399 110) nil nil nil nil 2))) (setf (frame-position newbox) (om-make-point 398 109)) newbox) (om-load-boxcall (quote genfun) "NTH-RANDOM1" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 326 184) nil (list (list 0 2 3 5 6 8)) "&" nil 1) (om-load-boxcall (quote bastype) "list7" (quote list) (quote nil) (om-make-point 303 4) (om-make-point 50 28) (list 4 5 6) "(4 5 6)" nil) (om-load-boxcall (quote genfun) "LIST-TI-PRIMEFORMS1" (quote list-ti-primeforms) (quote ((om-load-inputfun (quote input-funbox) "number of elements in each primeform (or a list of such numbers)" "CARD" 3) (om-load-inputfunmenu1 (quote input-funmenu) "" "TAG" nil (list (list "normal" nil) (list "tagged [:ti]" (quote :ti)))))) (om-make-point 278 45) nil nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 397 213) nil (list (list 0 2 4 6 8)) "&" nil 1) (om-load-boxcall (quote bastype) "list6" (quote list) (quote nil) (om-make-point 160 347) (om-make-point 62 28) "trichord" "\"trichord\"" nil) (om-load-boxcall (quote bastype) "list5" (quote list) (quote nil) (om-make-point 139 390) (om-make-point 32 28) "ic" "\"ic\"" nil) (om-load-boxcall (quote lispfun) "LIST4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 165 420) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list3" (quote list) (quote nil) (om-make-point 215 140) (om-make-point 23 20) 3 "3" nil) (om-load-boxcall (quote genfun) "LIST-TI-PRIMEFORMS" (quote list-ti-primeforms) (quote ((om-load-inputfun (quote input-funbox) "number of elements in each primeform (or a list of such numbers)" "CARD" 3) (om-load-inputfunmenu1 (quote input-funmenu) "" "TAG" (quote :ti) (list (list "normal" nil) (list "tagged [:ti]" (quote :ti)))))) (om-make-point 205 170) nil nil nil nil 1) (om-load-boxcall (quote genfun) "INCL-VEC-ANGLE1" (quote incl-vec-angle) (quote ((om-load-inputfun (quote input-funbox) "list of integers" "CHORD1" nil) (om-load-inputfun (quote input-funbox) "list of integers" "CHORD2" nil) (om-load-inputfun (quote input-funbox) "list of items, each an integer or an integer list beginning :t, :ti, :tp, or :tip" "CLASSREPS" (list 1 2 3 4 5 6)))) (om-make-point 200 270) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 97 206) (om-make-point 84 25) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil) (om-load-boxcall (quote genfun) "INCL-VEC-ANGLE" (quote incl-vec-angle) (quote ((om-load-inputfun (quote input-funbox) "list of integers" "CHORD1" nil) (om-load-inputfun (quote input-funbox) "list of integers" "CHORD2" nil) (om-load-inputfun (quote input-funbox) "list of items, each an integer or an integer list beginning :t, :ti, :tp, or :tip" "CLASSREPS" (list 1 2 3 4 5 6)))) (om-make-point 80 270) nil nil nil nil 1))) (quote ((13 0 1 0 nil 0) (4 0 1 1 nil 0) (5 0 1 2 nil 0) (7 0 2 0 nil 0) (10 0 3 0 nil 0) (2 0 4 1 nil 0) (3 0 5 1 nil 0) (9 0 6 0 nil 0) (6 0 7 0 nil 0) (8 0 9 0 nil 0) (6 0 10 0 nil 0) (12 0 13 0 nil 0) (18 0 13 1 nil 0) (11 0 13 2 nil 0) (16 0 13 3 nil 0) (14 0 15 0 nil 0) (10 0 16 0 nil 0) (7 0 16 1 nil 0) (15 0 16 2 nil 0) (10 0 18 0 nil 0) (7 0 18 1 nil 0) (17 0 18 2 nil 0))) nil 6.04))
