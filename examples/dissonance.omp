; OM File Header - Saved 2008/11/07 13:50:38
; (6.04 :patc (om-make-point 175 17) (om-make-point 50 50) (om-make-point 858 488) "No documentation " 183 0 nil "2008/11/06 19:28:54")
; End File Header
(in-package :om)(load-lib-for (quote ("ompitchfield")))(setf *om-current-persistent* (om-load-patch1 "dissonance" (quote ((let ((newbox (om-load-boxcall (quote genfun) "NESTING->TIMING1" (quote nesting->timing) (quote ((om-load-inputfun (quote input-funbox) "nested list of numbers" "LST" nil) (om-load-inputfun (quote input-funbox) "number of nested levels to flatten [or if negative, abs val is number of nested levels to remain after flattening]" "LEVELS" -1) (om-load-inputfun (quote input-funbox) "time unit separating members of same sublist (multiplied at sublist boundaries)" "TIME-UNIT" 500))) (om-make-point 36 125) nil nil nil nil 2))) (setf (frame-position newbox) (om-make-point 36 125)) newbox) (let ((newbox (om-load-boxcall (quote genfun) "NESTING->TIMING" (quote nesting->timing) (quote ((om-load-inputfun (quote input-funbox) "nested list of numbers" "LST" nil) (om-load-inputfun (quote input-funbox) "number of nested levels to flatten [or if negative, abs val is number of nested levels to remain after flattening]" "LEVELS" -1) (om-load-inputfun (quote input-funbox) "time unit separating members of same sublist (multiplied at sublist boundaries)" "TIME-UNIT" 500))) (om-make-point 515 239) nil nil nil nil 2))) (setf (frame-position newbox) (om-make-point 515 246)) newbox) (om-load-boxcomment "comment" (om-make-point 334 150) (quote "Sorts a list of ti-setclasses according to a weighted sum of their inclusion vectors. When A1 and A2 are connected (at top), the inclusion vectors are [conventional] interval vectors and the weighting reflects the potential dissonance of each interval class. When B1 and B2 are connected, the inclusion vectors are interval vectors supplemented with an additional place that counts ti[014] content; by weighting this more heavily (in the corresponding place in the weight-list, B2) we define a more contextual measure of chord quality, for compositional contexts in which we want to isolate pcsets with high potential dissonance and/or high degree of major/minor conflict.") "" (om-make-point 23 262) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment111" (om-make-point 23 28) (quote "B2") "" (om-make-point 527 27) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 23 28) (quote "B1") "" (om-make-point 448 6) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 24 28) (quote "A2") "" (om-make-point 207 18) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 24 28) (quote "A1") "" (om-make-point 165 44) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 531 325) (om-make-point 220 100) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6300 6500 6800) (6000 6200 6500 7900) (6000 6200 7600 7900) (6000 6200 6500 6800) (6000 6200 6800 7600) (6000 6500 6800 7300) (6000 6300 6600 6900) (6000 6200 6600 7600) (6000 6200 6300 7900) (6000 6200 6900 7600 7900) (6000 6200 6600 6800) (6000 6300 6500 7300) (6000 6200 6300 6500) (6000 6500 7300 7900) (6000 6300 7300 7900) (6000 6300 6600 7300) (6000 6200 6600 6900 7600) (6000 6300 6500 6800 7300) (6000 6200 6300 6500 7900) (6000 6500 6600 7300) (6000 6200 6600 6800 7600) (6000 6300 6600 6800 7300) (6000 6200 6300 6500 6800) (6000 6200 7300 7900) (6000 6200 6600 7300) (6000 6300 6500 7300 7900) (6000 6600 7300 7900) (6000 6200 6500 6900 7600 7900) (6000 6500 6600 6800 7300) (6000 6800 7300 7600) (6000 6200 6300 7300) (6000 6300 6500 6600 7300) (6000 6200 6300 6500 6900 7900) (6000 7300 7600 7900) (6000 6200 6600 6800 7300) (6000 6600 7300 7600) (6000 6200 6300 6600) (6000 6200 6600 6800 7600 8200) (6000 6300 6500 6800 7300 7900) (6000 6200 6300 7300 7900) (6000 6300 6500 6600 6800 7300) (6000 6200 6500 7300) (6000 6200 6600 7300 7900) (6000 6200 7300 7600) (6000 6600 6800 7300 7600) (6000 6200 6500 6800 7600) (6000 6300 6600 6900 7300) (6000 6200 6300 6600 6800) (6000 6200 6500 6800 7300) (6000 6300 7600 7900) (6000 6200 6500 7300 7900) (6000 6200 6800 7300 7600) (6000 6200 7300 7600 7900) (6000 6200 6600 7300 7600) (6000 6300 6600 7300 7900) (6000 6300 6500 6900 7300 7900) (6000 6500 7300 7600) (6000 6200 6300 6500 7300) (6000 6200 6300 6800 7300 7900) (6000 6200 6300 6600 7300) (6000 6300 7300 7600) (6000 6600 6900 7300 7600) (6000 6200 6600 6800 7300 7900) (6000 6300 6800 7300 7600) (6000 6300 6500 6800 7600) (6000 6200 6600 6800 7300 7600) (6000 6200 6300 7600 7900) (6000 6800 7300 7600 7900) (6000 6200 6300 6500 6800 7300) (6000 6500 7300 7600 7900) (6000 6200 6500 6800 7300 7900) (6000 6200 6300 6500 7300 7900) (6000 6300 6600 7300 7600) (6000 6200 6600 7300 7600 7900) (6000 6200 6300 6600 6800 7300) (6000 6200 6300 6600 7600) (6000 6200 6500 6600 7300) (6000 6200 6500 6900 7300 7900) (6000 6200 6900 7300 7600 7900) (6000 6300 6600 6800 7300 7600) (6000 6200 6600 6900 7300 7600) (6000 6200 6300 6600 6900 7900) (6000 6600 6900 7300 7600 7900) (6000 6300 6500 6600 6900 7300) (6000 6500 6800 7300 7600) (6000 6200 6300 6500 6600 6800) (6000 6200 6300 6600 6900 7600) (6000 6200 6300 6500 7600 7900) (6000 6200 6300 6600 6800 7600) (6000 6200 6300 7300 7600) (6000 6300 6600 6900 7300 7900) (6000 6200 6300 6500 6800 7600) (6000 6300 7300 7600 7900) (6000 6200 6800 7300 7600 7900) (6000 6200 6500 6600 6800 7300) (6000 6200 6300 6600 6900 7300) (6000 6200 6500 7300 7600) (6000 6200 6300 6800 7300 7600) (6000 6500 6900 7300 7600 7900) (6000 6200 6500 6600 7300 7900) (6000 6200 6300 6600 7300 7900) (6000 6300 6600 6900 7300 7600) (6000 6500 6600 6800 7300 7600) (6000 6200 6500 7300 7600 7900) (6000 6200 6300 6500 6600 7300) (6000 6200 6300 7300 7600 7900) (6000 6200 6300 6600 7300 7600) (6000 6300 6500 6800 7300 7600) (6000 6300 6900 7300 7600 7900) (6000 6300 6800 7300 7600 7900) (6000 6200 6500 6600 6900 7300) (6000 6200 6500 6800 7300 7600) (6000 6300 6500 7300 7600 7900) (6000 6300 6600 7300 7600 7900) (6000 6200 6500 6600 7300 7600) (6000 6200 6300 6500 7300 7600) (6000 6500 6800 6900 7300 7600))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 113000 114000 115000 116000 117000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quoteloffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 3/5 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "P->MC" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 550 176) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FIND-PCSET-IN-FIELD" (quote find-pcset-in-field) (quote ((om-load-inputfun (quote input-funbox) "list of mod-12 integers (or list of such lists)" "PCSET" (list 0 2)) (om-load-inputfun (quote input-funbox) "list of integers" "FIELD" (list 0 2 5 7 10 12 15)))) (om-make-point 373 258) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list31" (quote list) (quote nil) (om-make-point 382 48) (om-make-point 132 28) (list 90 30 15 12 9 50 180) "(90 30 15 12 9 50 180)" nil) (om-load-boxcall (quote bastype) "list4" (quote list) (quote nil) (om-make-point 292 21) (om-make-point 136 28) (list 1 2 3 4 5 6 (list (quote :ti) 0 1 4)) "(1 2 3 4 5 6 (:ti 0 1 4))" nil) (om-load-boxcall (quote bastype) "list3" (quote list) (quote nil) (om-make-point 229 42) (om-make-point 110 28) (list 90 30 15 12 9 50) "(90 30 15 12 9 50)" nil) (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 189 67) (om-make-point 80 28) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil) (om-load-boxcall (quote genfun) "SORT-KEY_INCL-VEC-SUM" (quote sort-key_incl-vec-sum) (quote ((om-load-inputfun (quote input-funbox) "list of items, each an integer or an integer list beginning :t, :ti, :tp, or :tip" "CLASSREPS" (list 1 2 3 4 5 6)) (om-load-inputfun (quote input-funbox) "weight applied to raw multiplicity of corresponding <classreps> item" "WEIGHTLIST" (list 90 30 15 12 9 50)))) (om-make-point 261 121) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote <)) (om-load-inputfun (quote input-funbox) "key" "KEY" nil))) (om-make-point 151 193) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 396 126) (om-make-point 170 28) (list 0 2 3 5 6 8 9 11 13 16 19 22) "(0 2 3 5 6 8 9 11 13 16 19 22)" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 93 15) (om-make-point 50 28) (list 4 5 6) "(4 5 6)" nil) (om-load-boxcall (quote genfun) "LIST-TI-PRIMEFORMS" (quote list-ti-primeforms) (quote ((om-load-inputfun (quote input-funbox) "number of elements in each primeform (or a list of such numbers)" "CARD" 3) (om-load-inputfunmenu1 (quote input-funmenu) "" "TAG" nil (list (list "normal" nil) (list "tagged [:ti]" (quote :ti)))))) (om-make-point 40 49) nil nil nil nil 1))) (quote ((18 0 0 0 nil 0) (8 0 1 0 nil 0) (1 0 7 1 nil 0) (9 0 8 0 nil 0) (15 0 9 0 nil 0) (16 0 9 1 nil 0) (11 0 14 0 nil 0) (10 0 14 1 nil 0) (0 0 15 0 nil 0) (14 0 15 2 nil 0) (17 0 18 0 nil 0))) nil 6.04))
