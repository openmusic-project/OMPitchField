; OM File Header - Saved 2021/07/09 21:52:18
; (6.2 :patc (om-make-point 241 15) (om-make-point 0 0) (om-make-point 450 238) "No documentation " 183 0 nil "2021/07/09 21:52:18")
; End File Header
(in-package :om)(load-lib-for (quote ("OMPitchField")))(setf *om-current-persistent* (om-load-patch1 "naming" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 233 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list11" (quote list) (quote nil) (om-make-point 201 54) (om-make-point 107 31) (list 9 10 11 2 5) "(9 10 11 2 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 109 60) (om-make-point 37 30) 27 "27" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 58 60) (om-make-point 31 29) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "to_forte_numbers1" (om-load-patch-abs1 "to_forte_numbers" (quote ((let ((box (om-load-boxout "output2" 1 (om-make-point 91 398) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "forte-num" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output1" 0 (om-make-point 270 180) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "card" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 85 15) "no documentation" "pcs" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1+" (quote 1+) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 107 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "OBJECT1" "OBJECT1" nil) (om-load-inputfun (quote input-funbox) "OBJECT2" "OBJECT2" nil))) (om-make-point 123 209) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POSITION" (quote position) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputkeyword (quote input-keyword) "Choose from this list (:TEST-NOT :TEST :KEY :FROM-END :END :START)" "Keyword input" (quote :test) nil nil))) (om-make-point 100 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-TI-PRIMEFORMS" (quote list-ti-primeforms) (quote ((om-load-inputfun (quote input-funbox) "number of elements in each primeform (or a list of such numbers)" "CARD" 3))) (om-make-point 156 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 176 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TI-PRIMEFORM" (quote ti-primeform) (quote ((om-load-inputfun (quote input-funbox) "any member of the set class whose ti-primeform is sought" "PCSET" (list 1 3 4)))) (om-make-point 120 48) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (7 0 1 0 nil 0) (5 0 3 0 nil 0) (8 0 5 0 nil 0) (6 0 5 1 nil 0) (4 0 5 2 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (2 0 8 0 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 384 514)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "pcs" nil))) (om-make-point 198 96) nil (list 5 38) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "from_forte_numbers1" (om-load-patch-abs1 "from_forte_numbers" (quote ((let ((box (om-load-boxin "input1" 1 (om-make-point 215 35) "no documentation" "forte-num" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 85 35) "no documentation" "card" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 195 230) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) "primeform" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 131 26) (quote "Rahn prime form") "" (om-make-point 63 241) nil (om-make-color 0 4/5 0) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 161 23) (quote "Forte number (no 'Z')") "" (om-make-point 182 21) nil (om-make-color 0 4/5 0) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 205 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 187 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-TI-PRIMEFORMS" (quote list-ti-primeforms) (quote ((om-load-inputfun (quote input-funbox) "number of elements in each primeform (or a list of such numbers)" "CARD" 3))) (om-make-point 79 101) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 96 24) (quote "Cardinality") "" (om-make-point 72 21) nil (om-make-color 0 4/5 0) (om-make-font "Geneva" 12 :family "Geneva" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 2 0 nil 0) (0 0 5 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (1 0 7 0 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 400 416)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "card" nil) (om-load-inputfun (quote input-funbox) "no documentation" "forte-num" nil))) (om-make-point 45 97) nil (list (list 0 2 5 8)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 1 0 1 nil 0) (1 0 4 0 nil 0) (3 0 5 0 nil 0) (2 0 5 1 nil 0))) nil 6.2))
