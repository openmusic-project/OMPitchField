; OM File Header - Saved 2008/11/07 13:50:39
; (6.04 :patc (om-make-point 241 15) (om-make-point 50 50) (om-make-point 500 400) "No documentation " 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for '("OMPitchField"))(setf *om-current-persistent* (om-load-patch1 "naming" '((om-load-boxcall 'lispfun "LIST2" 'list '((om-load-inputfun 'input-funbox "add-input" "add-input" nil) (om-load-inputfun 'input-funbox "add-input" "add-input" nil)) (om-make-point 233 171) nil nil nil nil 1) (om-load-boxcall 'bastype "list11" 'list 'nil (om-make-point 243 60) (om-make-point 102 25) (list 9 10 11 2 5) "(9 10 11 2 5)" nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 123 60) (om-make-point 23 20) 27 "27" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 58 60) (om-make-point 23 20) 4 "4" nil) (om-load-boxcall 'abstraction "to_forte_numbers1" (om-load-patch-abs1 "to_forte_numbers" '((om-load-boxout "output2" 1 (om-make-point 254 329) '((om-load-inputfun 'input-funbox "out" "out" nil)) "forte-num" nil) (om-load-boxout "output1" 0 (om-make-point 270 180) '((om-load-inputfun 'input-funbox "out" "out" nil)) "card" nil) (om-load-boxin "input" 0 (om-make-point 85 15) "no documentation" "pcs" nil nil) (om-load-boxcall 'lispfun "1+" '1+ '((om-load-inputfun 'input-funbox "NUMBER" "NUMBER" nil)) (om-make-point 274 282) nil nil nil nil 1) (om-load-boxcall 'lispfun "EQUAL" 'equal '((om-load-inputfun 'input-funbox "OBJECT1" "OBJECT1" nil) (om-load-inputfun 'input-funbox "OBJECT2" "OBJECT2" nil)) (om-make-point 123 209) nil nil "l" nil 1) (om-load-boxcall 'lispfun "POSITION" 'position '((om-load-inputfun 'input-funbox "ITEM" "ITEM" nil) (om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil) (om-load-inputfun 'input-keyword "Choose from this list (:TEST-NOT :TEST :KEY :FROM-END :END :START)" "Keyword input" ':test)) (om-make-point 100 278) nil nil nil nil 1) (om-load-boxcall 'genfun "LIST-TI-PRIMEFORMS" 'list-ti-primeforms '((om-load-inputfun 'input-funbox "number of elements in each primeform (or a list of such numbers)" "CARD" 3) (om-load-inputfunmenu1 'input-funmenu "" "TAG" nil (list (list "normal" nil) (list "tagged [:ti]" ':ti)))) (om-make-point 156 182) nil nil nil nil 1) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 176 125) nil nil nil nil 1) (om-load-boxcall 'genfun "TI-PRIMEFORM" 'ti-primeform '((om-load-inputfun 'input-funbox "any member of the set class whose ti-primeform is sought" "PCSET" (list 1 3 4))) (om-make-point 120 48) nil nil nil nil 1)) '((3 0 0 0 nil 0) (7 0 1 0 nil 0) (5 0 3 0 nil 0) (8 0 5 0 nil 0) (6 0 5 1 nil 0) (4 0 5 2 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (2 0 8 0 nil 0)) 5.1 nil) '((om-load-inputfun 'input-funbox "no documentation" "pcs" nil)) (om-make-point 198 96) nil nil nil nil) (om-load-boxcall 'abstraction "from_forte_numbers1" (om-load-patch-abs1 "from_forte_numbers" '((om-load-boxin "input1" 1 (om-make-point 215 35) "no documentation" "forte-num" nil nil) (om-load-boxin "input" 0 (om-make-point 85 35) "no documentation" "card" nil nil) (om-load-boxout "output" 0 (om-make-point 195 230) '((om-load-inputfun 'input-funbox "out" "out" nil)) "primeform" nil) (om-load-boxcomment "comment11" (om-make-point 131 26) '"Rahn prime form" "" (om-make-point 63 241) nil (om-make-color 0 4/5 0) (om-make-font "Geneva" 12 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment1" (om-make-point 161 23) '"Forte number (no 'Z')" "" (om-make-point 182 21) nil (om-make-color 0 4/5 0) (om-make-font "Geneva" 12 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcall 'lispfun "1-" '1- '((om-load-inputfun 'input-funbox "NUMBER" "NUMBER" nil)) (om-make-point 205 107) nil nil nil nil 1) (om-load-boxcall 'lispfun "NTH" 'nth '((om-load-inputfun 'input-funbox "N" "N" nil) (om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 187 181) nil nil nil nil 1) (om-load-boxcall 'genfun "LIST-TI-PRIMEFORMS" 'list-ti-primeforms '((om-load-inputfun 'input-funbox "number of elements in each primeform (or a list of such numbers)" "CARD" 3) (om-load-inputfunmenu1 'input-funmenu "" "TAG" nil (list (list "normal" nil) (list "tagged [:ti]" ':ti)))) (om-make-point 79 101) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 96 24) '"Cardinality" "" (om-make-point 72 21) nil (om-make-color 0 4/5 0) (om-make-font "Geneva" 12 :family nil :style '(:bold) :mode '(:srcor)))) '((6 0 2 0 nil 0) (0 0 5 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (1 0 7 0 nil 0)) 5.1 nil) '((om-load-inputfun 'input-funbox "no documentation" "card" nil) (om-load-inputfun 'input-funbox "no documentation" "forte-num" nil)) (om-make-point 45 97) nil nil nil nil)) '((4 0 0 0 nil 0) (4 1 0 1 nil 0) (1 0 4 0 nil 0) (3 0 5 0 nil 0) (2 0 5 1 nil 0)) nil 5.1))
