; OM File Header - Saved 2008/11/07 13:50:39
; (6.04 :patc (om-make-point 299 23) (om-make-point 50 50) (om-make-point 776 521) "No documentation " 183 0 nil "2008/11/06 19:29:30")
; End File Header
(in-package :om)(load-lib-for (quote ("ompitchfield")))(setf *om-current-persistent* (om-load-patch1 "or-tests" (quote ((om-load-boxcomment "comment11" (om-make-point 81 51) (quote "filtered pcset$list with vldg$reference") "" (om-make-point 652 380) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 61 38) (quote "filtered pcset list") "" (om-make-point 367 389) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 80 40) (quote "unfiltered$pcset list") "" (om-make-point 81 391) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "P->MC11" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 490 364) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ11" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 560 370) (om-make-point 88 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300 6500 6700 6800 7000) (6400 6600 6900 7100) (6300 6500 6700 6800 7000) (6900 7100 6200 6400) (6300 6500 6700 6800 7000) (7100 6100 6400 6600) (6300 6500 6700 6800 7000) (6800 7100 6100 6400) (6300 6500 6700 6800 7000) (7100 6200 6400 6700))) :lonset (quote (0 500 1500 2000 3000 3500 4500 5000 6000 6500 7500)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 0 (quote t))) t nil nil nil) (let ((newbox (om-load-boxcall (quote genfun) "NESTING->TIMING11" (quote nesting->timing) (quote ((om-load-inputfun (quote input-funbox) "nested list of numbers" "LST" nil) (om-load-inputfun (quote input-funbox) "number of nested levels to flatten [or if negative, abs val is number of nested levels to remain after flattening]" "LEVELS" -1) (om-load-inputfun (quote input-funbox) "time unit separating members of same sublist (multiplied at sublist boundaries)" "TIME-UNIT" 500))) (om-make-point 510 292) nil nil nil nil 2))) (setf (frame-position newbox) (om-make-point 510 292)) newbox) (let ((newbox (om-load-boxcall (quote genfun) "NESTING->TIMING2" (quote nesting->timing) (quote ((om-load-inputfun (quote input-funbox) "nested list of numbers" "LST" nil) (om-load-inputfun (quote input-funbox) "number of nested levels to flatten [or if negative, abs val is number of nested levels to remain after flattening]" "LEVELS" -1) (om-load-inputfun (quote input-funbox) "time unit separating members of same sublist (multiplied at sublist boundaries)" "TIME-UNIT" 500))) (om-make-point 511 139) nil nil nil nil 2))) (setf (frame-position newbox) (om-make-point 511 139)) newbox) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "pair chord w/ref" (quote ((om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 77 149) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 35 210) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 21 63) (om-make-point 76 28) (list 3 5 7 8 10) "(3 5 7 8 10)" nil) (om-load-boxin "input" 0 (om-make-point 105 45) "no documentation" "chord" nil nil))) (quote ((2 0 0 0 nil 0) (3 0 0 1 nil 0) (0 0 1 0 nil 0))) 6.04 nil) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 426 172) nil nil "l" "pair chord w/ref") (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 505 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "P->MC1" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 213 376) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 283 382) (om-make-point 85 85) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400 6600 6900 7100) (6900 7100 6200 6400) (7100 6100 6400 6600) (6800 7100 6100 6400) (7100 6200 6400 6700))) :lonset (quote (0 500 1000 2000 2500 3500)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.04 nil))))) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 0 (quote t))) t nil nil nil) (let ((newbox (om-load-boxcall (quote genfun) "NESTING->TIMING1" (quote nesting->timing) (quote ((om-load-inputfun (quote input-funbox) "nested list of numbers" "LST" nil) (om-load-inputfun (quote input-funbox) "number of nested levels to flatten [or if negative, abs val is number of nested levels to remain after flattening]" "LEVELS" -1) (om-load-inputfun (quote input-funbox) "time unit separating members of same sublist (multiplied at sublist boundaries)" "TIME-UNIT" 500))) (om-make-point 233 304) nil nil nil nil 2))) (setf (frame-position newbox) (om-make-point 233 304)) newbox) (om-load-boxcall (quote bastype) "list11" (quote list) (quote nil) (om-make-point 295 17) (om-make-point 46 28) (list 3 10) "(3 10)" nil) (om-load-boxcall (quote bastype) "list21" (quote list) (quote nil) (om-make-point 351 43) (om-make-point 60 28) (list (list 1 0 1)) "((1 0 1))" nil) (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 240 43) (om-make-point 66 28) (list (list 0 2 12)) "((0 2 12))" nil) (let ((newbox (om-load-boxcall (quote genfun) "MAKE-PC-VLDG-TEST1" (quote make-pc-vldg-test) (quote ((om-load-inputfun (quote input-funbox) "list of mod-12 integers" "FROM-CHORD" (list 0 2 7)) (om-load-inputfun (quote input-funbox) "list of triples: FIRST integer in [-6 , 11]; SECOND and THIRD integers" "VLSPEC-TRIPLES" (list (list 3 0 0))))) (om-make-point 290 78) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 290 78)) newbox) (let ((newbox (om-load-boxcall (quote genfun) "MAKE-PC-VLDG-TEST" (quote make-pc-vldg-test) (quote ((om-load-inputfun (quote input-funbox) "list of mod-12 integers" "FROM-CHORD" (list 0 2 7)) (om-load-inputfun (quote input-funbox) "list of triples: FIRST integer in [-6 , 11]; SECOND and THIRD integers" "VLSPEC-TRIPLES" (list (list 3 0 0))))) (om-make-point 182 78) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 182 78)) newbox) (om-load-boxcall (quote genfun) "OR-TESTS" (quote or-tests) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "TESTFUNS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TESTFUNS" nil))) (om-make-point 254 148) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 162 17) (om-make-point 76 28) (list 3 5 7 8 10) "(3 5 7 8 10)" nil) (om-load-boxcall (quote genfun) "FILTER-CHORDLIST" (quote filter-chordlist) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" nil) (om-load-inputfun (quote input-funbox) "list of chords" "CHORDLIST" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "REJECT" (quote t) (list (list "pass" nil) (list "reject" (quote t)))))) (om-make-point 255 221) nil nil nil nil 1) (let ((newbox (om-load-boxcall (quote genfun) "NESTING->TIMING" (quote nesting->timing) (quote ((om-load-inputfun (quote input-funbox) "nested list of numbers" "LST" nil) (om-load-inputfun (quote input-funbox) "number of nested levels to flatten [or if negative, abs val is number of nested levels to remain after flattening]" "LEVELS" -1) (om-load-inputfun (quote input-funbox) "time unit separating members of same sublist (multiplied at sublist boundaries)" "TIME-UNIT" 500))) (om-make-point 32 220) nil nil nil nil 2))) (setf (frame-position newbox) (om-make-point 32 220)) newbox) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 82 298) (om-make-point 85 90) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6200 6500 6700) (6100 6300 6600 6800) (6200 6400 6700 6900) (6300 6500 6800 7000) (6400 6600 6900 7100) (6500 6700 7000 6000) (6600 6800 7100 6100) (6700 6900 6000 6200) (6800 7000 6100 6300) (6900 7100 6200 6400) (7000 6000 6300 6500) (7100 6100 6400 6600) (6000 6300 6500 6800) (6100 6400 6600 6900) (6200 6500 6700 7000) (6300 6600 6800 7100) (6400 6700 6900 6000) (6500 6800 7000 6100) (6600 6900 7100 6200) (6700 7000 6000 6300) (6800 7100 6100 6400) (6900 6000 6200 6500) (7000 6100 6300 6600) (7100 6200 6400 6700))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 13000)) :ldur (quotelvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.04 nil))))) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "P->MC" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 12 292) nil nil nil nil 1) (let ((newbox (om-load-boxcall (quote genfun) "MAKE-TI-SETCLASS" (quote make-ti-setclass) (quote ((om-load-inputfun (quote input-funbox) "any member of the desired ti-setclass (or list containing one member of each desired ti-setclass)" "PCSET" (list 0 1 2)))) (om-make-point 67 130) nil nil nil "make-ti-setclass" 1))) (setf (frame-position newbox) (om-make-point 67 130)) newbox) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 38 77) (om-make-point 120 28) (list (list 0 2 5 7) (list 0 3 5 8)) "((0 2 5 7) (0 3 5 8))" nil))) (quote ((5 0 3 0 nil 0) (3 0 4 1 nil 0) (5 1 4 2 nil 0) (8 0 5 0 nil 0) (19 0 6 0 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (11 0 9 0 nil 0) (9 0 10 1 nil 0) (11 1 10 2 nil 0) (19 0 11 0 nil 0) (12 0 15 0 nil 0) (13 0 15 1 nil 1) (18 0 16 0 nil 0) (14 0 16 1 nil 1) (16 0 17 0 nil 0) (15 0 17 1 nil 0) (17 0 19 0 nil 0) (23 0 19 1 nil 0) (23 0 20 0 nil 0) (22 0 21 1 nil 0) (20 1 21 2 nil 0) (20 0 22 0 nil 0) (24 0 23 0 nil 0))) nil 6.04))
