; OM File Header - Saved 2008/11/07 13:50:39
; (6.04 :patc (om-make-point 231 73) (om-make-point 50 50) (om-make-point 595 480) "No documentation " 183 0 nil "2008/11/06 19:32:47")
; End File Header
(in-package :om)(load-lib-for (quote ("ompitchfield")))(setf *om-current-persistent* (om-load-patch1 "pfield pruning" (quote ((om-load-boxcomment "comment11" (om-make-point 145 32) (quote "original field; lots of pc 6") "" (om-make-point 341 282) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 72 23) (quote "pruned field") "" (om-make-point 207 388) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "P->MC1" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 359 134) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 500)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 343 198) (om-make-point 151 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900) (5000) (5400) (5500) (5600) (6000) (6100) (6500) (6600) (6700) (7100) (7200) (7600) (7700) (7800) (8200) (8300))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.04 nil))))) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 -23) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 251 20) (om-make-point 70 28) (list 1 4 1 1 4) "(1 4 1 1 4)" nil) (om-load-boxcomment "comment" (om-make-point 144 105) (quote "removes this pitch --->$from the field; good way to handle an overrepresented pc and make a pfield more efficient to search") "" (om-make-point 21 68) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 202 64) (om-make-point 36 28) (list 18) "(18)" nil) (om-load-boxcall (quote genfun) "SET-COMPLEMENT1" (quote set-complement) (quote ((om-load-inputfun (quote input-funbox) "a list of mod-12 integers (or a list of such lists)" "PCSET" (list 0 1 2)) (om-load-inputfun (quote input-funbox) "" "SPACE" nil))) (om-make-point 212 135) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 500)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 211 286) (om-make-point 111 95) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900) (5000) (5400) (5500) (5600) (6000) (6100) (6500) (6600) (6700) (7100) (7200) (7600) (7700) (8200) (8300))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems)) (list nil nil 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 -16) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "P->MC" (quote p->mc) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" nil))) (om-make-point 255 217) nil nil nil nil 1) (let ((newbox (om-load-boxcall (quote genfun) "MAKE-PFIELD" (quote make-pfield) (quote ((om-load-inputfun (quote input-funbox) "list of positive integers" "GEN" (list 1 4 1)) (om-load-inputfun (quote input-funbox) "integer" "ORIGIN" 0) (om-load-inputfun (quote input-funbox) "integer" "LO" -12) (om-load-inputfun (quote input-funbox) "integer" "HI" 24))) (om-make-point 261 55) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 261 55)) newbox))) (quote ((10 0 2 0 nil 0) (2 0 3 1 nil 0) (6 0 7 0 nil 0) (10 0 7 1 nil 0) (9 0 8 1 nil 0) (7 0 9 0 nil 0) (4 0 10 0 nil 0))) nil 6.04))
